<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[So X....]]></title>
  <link href="http://aizr.github.io/wow/atom.xml" rel="self"/>
  <link href="http://aizr.github.io/wow/"/>
  <updated>2013-07-03T12:09:16+08:00</updated>
  <id>http://aizr.github.io/wow/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Git 修正已commit的內容]]></title>
    <link href="http://aizr.github.io/wow/blog/2013/07/03/git-xiu-zheng-yi-commitde-nei-rong/"/>
    <updated>2013-07-03T11:33:00+08:00</updated>
    <id>http://aizr.github.io/wow/blog/2013/07/03/git-xiu-zheng-yi-commitde-nei-rong</id>
    <content type="html"><![CDATA[<p>很多時候可能手誤或其它原因把程式給commit上去了, 更慘的是還push到遠端的機器上！</p>

<p>Git 的指令很多, 但就是不知道如何拼湊才能正確的修改已經commit的錯誤&hellip;&hellip;</p>

<p>今日找到以下的方法,可以試試！</p>

<p>首先在本地端可以先下</p>

<pre><code>＄git log
</code></pre>

<p>找出下列這段</p>

<pre><code>commit 6b0832665f91cb102f9
</code></pre>

<p>這是git commit 後產生的識別代碼,請複製一下！</p>

<p>再將識別碼貼進下列command line</p>

<pre><code>＄git rebase -i &lt;commit 識別代碼&gt;
</code></pre>

<p>如此就會進入編輯程序囉～ 大致上會長得像下面的那樣子&hellip;..</p>

<pre><code>1 pick 6b08326 new post
2
3 # Rebase d65e784..6b08326 onto d65e784
4 #
5 # Commands:
6 #  p, pick = use commit
7 #  r, reword = use commit, but edit the commit message
8 #  e, edit = use commit, but stop for amending
9 #  s, squash = use commit, but meld into previous commit
10 #  f, fixup = like "squash", but discard this commit's log message
11 #  x, exec = run command (the rest of the line) using shell
12 #
13 # These lines can be re-ordered; they are executed from top to bottom.
14 #
15 # If you remove a line here THAT COMMIT WILL BE LOST.
16 # However, if you remove everything, the rebase will be aborted.
17 #
18 # Note that empty commits are commented out
</code></pre>

<p>有關操作指令的解釋如下：</p>

<ul>
<li>pick = 使用這個 commit,不做更動.</li>
<li>reword = 使用這個 commit ，但要更改 commit message.</li>
<li>edit = 使用這個 commit，但要更動 commit 的內容.</li>
<li>squash = 使用這個 commit，並與前面那個commit合併，並保 commit messages.</li>
<li>fixup = squash + 只使用前面那條 commit 的 message ，捨棄這條 message</li>
<li>exec = 執行一條指令</li>
</ul>


<p>然後將檔案儲存, 再來就可以將commit 的內容倒出來修正了！</p>

<pre><code>$ git reset --HEAD^ #將所有comit的內容倒出來.
</code></pre>

<p>修正完畢後將修正完的檔案加入git暫存區</p>

<pre><code>$ git add &lt;file name&gt;
$ git commit -a -c -ORIG_HEAD #如果不想重新commit ,可以使用舊的commit訊息.
</code></pre>

<p>現在都做完修正也commit了,再來就是</p>

<pre><code>$ git rebase --continue
</code></pre>

<p>git 會透過 commit &mdash;amend 一起重新commit, 接下來就是push到遠端囉！</p>

<pre><code>$ git push -f origin master # -f 是強制push
</code></pre>

<p>這樣就大功告成了！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git editor 設定]]></title>
    <link href="http://aizr.github.io/wow/blog/2013/07/02/git-editor-she-ding/"/>
    <updated>2013-07-02T18:52:00+08:00</updated>
    <id>http://aizr.github.io/wow/blog/2013/07/02/git-editor-she-ding</id>
    <content type="html"><![CDATA[<p>使用 Git rebase 的時候, Git 會自動使用系統內的編輯器！ 例如： vi , vim &hellip;&hellip;</p>

<p>預設的情形下有可能開不了編輯器, 輸入下列command line即可使用！</p>

<pre><code>git config --global core.editor "/usr/bin/vim"
</code></pre>

<p>要注意的是, 必需先知道自己的編輯器路徑, 所以先找路徑的command line</p>

<pre><code>$ which &lt;編輯器名稱&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[無法在ubuntu server上使用 Rails console]]></title>
    <link href="http://aizr.github.io/wow/blog/2013/06/19/wu-fa-zai-ubuntu-servershang-shi-yong-rails-console/"/>
    <updated>2013-06-19T10:54:00+08:00</updated>
    <id>http://aizr.github.io/wow/blog/2013/06/19/wu-fa-zai-ubuntu-servershang-shi-yong-rails-console</id>
    <content type="html"><![CDATA[<p>又遇到一個小小的問題, 但會整死你的問題！ 讓我想到牙痛不是病, 痛起來要人命&hellip;&hellip;.</p>

<p>在自己的Production Server上 , 無意中要開啟 Rails console的時候卻出現無法開啟的error log!</p>

<p>問了Google大神找到解決方法, 可以先使用看看production ENV</p>

<pre><code>＄ RAILS_ENV=production rails c
</code></pre>

<p>看看在production的環境變數下是否能正常運作！ 可以的話就把這個變數值放進.bashrc裡！</p>

<pre><code>$ echo 'export RAILS_ENV=production' &gt;&gt; .bashrc
</code></pre>

<p>就是這樣囉&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql Replication 修復]]></title>
    <link href="http://aizr.github.io/wow/blog/2013/06/01/mysql-replication-xiu-fu/"/>
    <updated>2013-06-01T16:45:00+08:00</updated>
    <id>http://aizr.github.io/wow/blog/2013/06/01/mysql-replication-xiu-fu</id>
    <content type="html"><![CDATA[<p>之前有遇到Replication table error, 有給它緊張到~ XD</p>

<p>後來找到了問題, 因為Master and slave兩邊的資料有不同步的問題, 導致無法複製！</p>

<p>以下是簡易的處理方法：</p>

<pre><code>mysql&gt; REPAIR TABLE table_name
mysql&gt; SET GLOBAL SQL_SLAVE_SKIP_COUNTER=1; 暫時跳過一筆資料
mysql&gt; START SLAVE; 重新啟動SLAVE
</code></pre>

<p>但執行後, 還是要找時間同步Master &amp; Slave兩邊的資料喔~~~</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mysql replication]]></title>
    <link href="http://aizr.github.io/wow/blog/2013/05/31/mysql-replication/"/>
    <updated>2013-05-31T15:00:00+08:00</updated>
    <id>http://aizr.github.io/wow/blog/2013/05/31/mysql-replication</id>
    <content type="html"><![CDATA[<p>MySQL 設定寫入 Master 後, 自動 Replication 到 Slave 去, 運作基本原理是: <br />

INSERT/UPDATE/DELETE 語法, 自動寫入 Master 的 binlog file.<br />
由 GRANT REPLICATION 授權的帳號, 自動將 SQL 語法 repl 到 Slave 的 DB 執行.<br />
因而完成 Replication 的動作.<br />

下述詳細可見: MySQL 5.0 Reference Manual :: 15 Replication
</p>


<p>1.設定 Replication 的操作 (Master)<br />
<li>打開my.cnf</li></p>

<pre><code>$ sudo vim /etc/mysql/my.cnf
</code></pre>

<p><li> 下面是 Debian Linux 的設定, 找到下面的設定, 新增/修改 成下面這樣子.</li></p>

<pre><code>bind-address            = 127.0.0.1
server-id               = 1
log_bin                 = /var/log/mysql/mysql-bin.log
</code></pre>

<p><li>若是 innodb, 且有用 transaction 的話, 需再加入下面兩行<li></p>

<pre><code>innodb_flush_log_at_trx_commit=1
sync_binlog=1
</code></pre>

<p><li>重新啟動mysql和進入mysql設定repl帳號密碼</li></p>

<pre><code>$ sudo /etc/init.d/mysql restart
$ mysql -u root -p

mysql&gt; GRANT REPLICATION SLAVE ON *.* TO 'repl'@'%' IDENTIFIED BY 'repl_pass';` # 先假設 帳號 repl, 密碼 repl
</code></pre>

<p><li>鎖定DB</li></p>

<pre><code>mysql&gt; FLUSH TABLES WITH READ LOCK; 先讓 DB 不要再寫資料進去.
mysql&gt; SHOW MASTER STATUS; 這邊要記好 File &amp; Position, 等一下設定 Slave 要用.
+----------------------+------------+------------------+----------------------+
| File                 | Position   | Binlog_Do_DB     | Binlog_Ignore_DB     |
+----------------------+------------+------------------+----------------------+
| mysql-bin.000014     |      232   |                  |                      |
+----------------------+------------+------------------+----------------------+
</code></pre>

<p><li>離開</li></p>

<pre><code>mysql&gt; quit
</code></pre>

<p><li>以下是幾種倒DB的方法：</li></p>

<pre><code>$ mysqldump -u root -p DB &gt; dbdump.sql
$ mysqldump --all-databases --lock-all-tables &gt;dbdump.sql
$ mysqldump --all-databases --master-data &gt;dbdump.sql
</code></pre>

<p><li>解除唯讀</li></p>

<pre><code>myql&gt; UNLOCK TABLES;  dump 完資料後, 進去 mysql 解除唯讀
</code></pre>

<p>再來就是將 dbdump.sql, scp 到 Slave 去即可.
Master 就到此為止</P>


<p>2.設定 Replication 的操作 (Slave)</p>

<pre><code>$ sudo vim /etc/mysql/my.cnf
server-id               = 2  # server-id 不能與其它機器相同
log_bin                 = /var/log/mysql/mysql-bin.log

$ mysql -u root -p # 進入 mysql
mysql&gt; create database DBNAME;
mysql&gt; use DBNAME; source dbdump.sql; 或 $ mysql -u root -p DBNAME &lt; dbdump.sql
mysql&gt; CHANGE MASTER TO
MASTER_HOST='MASTER_HOSTNAME',
MASTER_USER='repl',
MASTER_PASSWORD='repl_pass',
MASTER_LOG_FILE='mysql-bin.000014',
MASTER_LOG_POS=232; # 這邊就要用到之前 Master 抄下來的值.
</code></pre>

<p><li>開始Replication</li></p>

<pre><code>mysql&gt; START SLAVE;  這樣子就會開始 Replication !

mysql&gt; show master status; 檢查一下設定！

mysql&gt; show slave status;  檢查一下設定, 看是不是有異常狀況.
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TEST Blog]]></title>
    <link href="http://aizr.github.io/wow/blog/2013/05/22/test-blog/"/>
    <updated>2013-05-22T15:40:00+08:00</updated>
    <id>http://aizr.github.io/wow/blog/2013/05/22/test-blog</id>
    <content type="html"><![CDATA[<blockquote><p>之前一直想寫Blog, 但一直沒有真正實作！ 囧
現在開始認真實現(事實上是逼自己寫！囧 )
不管如何希望能一直<em>勤勞的</em>寫下去囉&hellip;&hellip;&hellip;&hellip;&hellip;.</p></blockquote>
]]></content>
  </entry>
  
</feed>
